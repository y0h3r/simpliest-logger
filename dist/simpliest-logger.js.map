{"version":3,"file":"simpliest-logger.js","sources":["../../src/constants.ts","../../src/utils/message-formatter.ts","../../src/simpliest-logger.ts","../../src/console-output.ts","../../src/file-output.ts"],"sourcesContent":["export enum LOG_LEVEL {\n  DEBUG = 'debug',\n  INFO = 'info ',\n  WARN = 'warn ',\n  ERROR = 'error',\n}\n\nenum SUPPORTED_COLORS {\n  'BLUE' = '\\x1b[34m',\n  'GREEN' = '\\x1b[32m',\n  'YELLOW' = '\\x1b[33m',\n  'RED' = '\\x1b[31m',\n}\n\nexport const logLevelColors: Record<LOG_LEVEL, string> = {\n  [LOG_LEVEL.DEBUG]: SUPPORTED_COLORS.BLUE,\n  [LOG_LEVEL.INFO]: SUPPORTED_COLORS.GREEN,\n  [LOG_LEVEL.WARN]: SUPPORTED_COLORS.YELLOW,\n  [LOG_LEVEL.ERROR]: SUPPORTED_COLORS.RED,\n};\n","import { LOG_LEVEL, logLevelColors } from '../constants';\n\nexport class MessageFormatter {\n  static format(level: LOG_LEVEL, message: string): string {\n    const timestamp = new Date().toISOString();\n    return `[${timestamp}] [${level.toUpperCase()}]: ${message}`;\n  }\n\n  static applyColor(level: LOG_LEVEL, message: string): string {\n    const color = logLevelColors[level];\n    const reset = '\\x1b[0m';\n    return `${color}${message}${reset}`;\n  }\n}\n","import { LOG_LEVEL } from './constants';\nimport { MessageFormatter } from './utils/message-formatter';\n\nexport interface LogOutput {\n  write(level: string, message: string, metadata?: Record<string, any>): void;\n}\n\nexport interface LoggerConfig {\n  level?: LOG_LEVEL;\n  outputs: LogOutput[];\n}\n\nexport class SimpliestLogger {\n  private level: LOG_LEVEL;\n\n  constructor(private config: LoggerConfig) {\n    this.level = config.level || LOG_LEVEL.INFO;\n  }\n\n  private shouldLog(level: LOG_LEVEL): boolean {\n    const levels = Object.values(LOG_LEVEL);\n    return levels.indexOf(level) >= levels.indexOf(this.level);\n  }\n\n  log(level: LOG_LEVEL, message: string, metadata?: Record<string, any>): void {\n    if (!this.shouldLog(level)) return;\n\n    const formattedMessage = MessageFormatter.format(level, message);\n    this.config.outputs.forEach((output) => {\n      output.write(level, formattedMessage, metadata);\n    });\n  }\n\n  debug(message: string, metadata?: Record<string, any>): void {\n    this.log(LOG_LEVEL.DEBUG, message, metadata);\n  }\n\n  info(message: string, metadata?: Record<string, any>): void {\n    this.log(LOG_LEVEL.INFO, message, metadata);\n  }\n\n  warn(message: string, metadata?: Record<string, any>): void {\n    this.log(LOG_LEVEL.WARN, message, metadata);\n  }\n\n  error(message: string, metadata?: Record<string, any>): void {\n    this.log(LOG_LEVEL.ERROR, message, metadata);\n  }\n}\n","import { LogOutput } from './simpliest-logger';\nimport { LOG_LEVEL, logLevelColors } from './constants';\n\nexport class ConsoleOutput implements LogOutput {\n  write(\n    level: LOG_LEVEL,\n    message: string,\n    metadata?: Record<string, any>\n  ): void {\n    const metadataString = metadata\n      ? ` | Metadata: ${JSON.stringify(metadata)}`\n      : '';\n    const color = logLevelColors[level] || '';\n    const reset = '\\x1b[0m';\n    console.log(`${color}${message}${metadataString}${reset}`);\n  }\n}\n","import fs from 'fs';\nimport path from 'path';\nimport { LogOutput } from './simpliest-logger';\n\nexport class FileOutput implements LogOutput {\n  private fileStream: fs.WriteStream;\n\n  constructor(private filePath: string) {\n    this.ensureFileExists();\n    this.fileStream = fs.createWriteStream(this.filePath, { flags: 'a' });\n  }\n\n  private ensureFileExists(): void {\n    const dirPath = path.dirname(this.filePath);\n\n    if (!fs.existsSync(dirPath)) {\n      fs.mkdirSync(dirPath, { recursive: true });\n    }\n\n    if (!fs.existsSync(this.filePath)) {\n      fs.writeFileSync(this.filePath, '');\n    }\n  }\n\n  write(level: string, message: string, metadata?: Record<string, any>): void {\n    const metadataString = metadata\n      ? ` | Metadata: ${JSON.stringify(metadata)}`\n      : '';\n    this.fileStream.write(\n      `[${level.toUpperCase()}] ${message}${metadataString}\\n`\n    );\n  }\n}\n"],"names":["LOG_LEVEL"],"mappings":"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"}